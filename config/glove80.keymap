
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_PC 1
#define LAYER_EditingLED 2
#define LAYER_NumbersLED 3
#define LAYER_MediaLED 4
#define LAYER_FunctionLED 5
#define LAYER_SentenceCase 6
#define LAYER_SentenceCasePC 7
#define LAYER_EndSentence 8
#define LAYER_Editing 9
#define LAYER_EditingPC 10
#define LAYER_ContSelect 11
#define LAYER_ContSelectPC 12
#define LAYER_Numbers 13
#define LAYER_NumbersPC 14
#define LAYER_Media 15
#define LAYER_MediaPC 16
#define LAYER_Function 17
#define LAYER_FunctionPC 18
#define LAYER_System 19
#define LAYER_EditingMo 20
#define LAYER_EditingTog 21
#define LAYER_NumbersMo 22
#define LAYER_NumbersTog 23
#define LAYER_ContSelectSL 24
#define LAYER_Magic 25

    /* Custom Defined Behaviors */
/ {
    /*****************************************************************************/
                /* Colemak-DH 36-Key Layout for Mac & PC */
/*****************************************************************************/

// Author: mrpotatohead546
// Intended for use with the Glove80 web editor
// Reading the Notes first is suggested to help understand this layout

/*****************************************************************************/
                            /* Key Positions */
/*****************************************************************************/

/* Use these key positions for Hold-Tap hold-trigger-key-positions and Combos

┌────┬────┬────┬────┬────┐                           ┌────┬────┬────┬────┬────┐
   0    1    2    3    4                                5    6    7    8    9
├────┼────┼────┼────┼────┼────┐                 ┌────┼────┼────┼────┼────┼────┤
  10   11   12   13   14   15                     16   17   18   19   20   21
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
  22   23   24   25   26   27                     28   29   30   31   32   33
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
  34   35   36   37   38   39                     40   41   42   43   44   45
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
  46   47   48   49   50   51                     58   59   60   61   62   63
├────┼────┼────┼────┼────┼────┘                 └────┼────┼────┼────┼────┼────┤
  64   65   66   67   68                               75   76   77   78   79
└────┴────┴────┴────┴────┘                           └────┴────┴────┴────┴────┘
                    ┌────┬────┬────┐       ┌────┬────┬────┐
                      52   53   54           55   56   57
                    ├────┼────┼────┤       ├────┼────┼────┤
                      69   70   71           72   73   74
                    └────┴────┴────┘       └────┴────┴────┘
*/

/*****************************************************************************/
                                /* Timers */
/*****************************************************************************/

/* How long Sticky Keys and Sticky Layers stay pressed */
#define STICKY_KEY_RELEASE_AFTER_MS 600

/* How quickly Combo keys must be pressed together */
#define COMBO_TIMEOUT_MS 25

/* How quickly both thumb Shift keys must be pressed together to activate Caps
   Word */
#define CAPS_WORD_COMBO_TIMEOUT_MS 150

/* How long to hold to activate home row mods for same side or mouse usage */
#define HOME_ROW_MODS_TAPPING_TERM_MS 300

/* Cool down after typing before home row mods can be used */
#define HOME_ROW_MODS_QUICK_TAP_MS 250

/* How long thumb keys can be held before rolls send the higher layer key */
#define THUMBS_TAPPING_TERM_MS 200

/* How quickly to double tap reaching thumb keys to hold down the tap action */
#define REACH_THUMBS_QUICK_TAP_MS 250

/* How long until each phase of the sentence case feature times out */
#define END_SENTENCE_AND_SENTENCE_CASE_TIMEOUT_MS 60000

/* How long to hold for Autoshift */
#define AUTOSHIFT_TAPPING_TERM_MS 200

/* How long until the selection continuation mode times out */
#define CONTINUE_SELECTION_TIMEOUT_MS 60000

/* How quickly confirmation action keys must be double tapped to activate */
#define DOUBLE_TAP_TIMEOUT_MS 250

/*****************************************************************************/
                                /* Layers */
/*****************************************************************************/

// BASE 0                   /* Base layer; Colemak-DH */
#define PC 1                /* Main PC mode layer; swaps CTRL and GUI */
#define EDITING_LED 2       /* Track Editing layer and activate Magic LED */
#define NUMBERS_LED 3       /* Track Numbers layer and activate Magic LED */
#define MEDIA_LED 4         /* Track Media layer and activate Magic LED */
#define FUNCTION_LED 5      /* Track Function layer and activate Magic LED */
#define SENTENCE_CASE 6     /* Shifted letters for sentence case feature */
#define SENTENCE_CASE_PC 7  /* Sentence case shifted letters with PC mods */
#define END_SENTENCE 8      /* Space activates sentence case after . ? or ! */
#define EDITING 9           /* Main Editing layer */
#define EDITING_PC 10       /* PC mode overlay for Editing layer */
#define CONT_SELECT 11      /* Selection continuation overlay layer */
#define CONT_SELECT_PC 12   /* PC mode selection continuation overlay layer */
#define NUMBERS 13          /* Main Numbers (and symbols) layer */
#define NUMBERS_PC 14       /* PC mode overlay for Numbers layer */
#define MEDIA 15            /* Main Media layer */
#define MEDIA_PC 16         /* PC mode overlay for Media layer */
#define FUNCTION 17         /* Main Function layer */
#define FUNCTION_PC 18      /* PC mode overlay for Function layer */
#define SYSTEM 19           /* Main System layer */
#define EDITING_MO 20       /* Momentary control layer for Editing layer */
#define EDITING_TOG 21      /* Locking control layer for Editing layer */
#define NUMBERS_MO 22       /* Momentary control layer for Numbers layer */
#define NUMBERS_TOG 23      /* Locking control layer for Numbers layer */
#define CONT_SELECT_SL 24   /* Prevent ->select leaking out of Editing layer */
#define MAGIC 25            /* Magic layer always available on top of stack */

/*****************************************************************************/
                            /* Layer Conditions */
/*****************************************************************************/

/* Conditional Layer helper */
#define LAYER_CONDITION(NAME, IF, THEN) \
    NAME { \
        if-layers = <IF>; \
        then-layer = <THEN>; \
    };

conditional_layers {
    compatible = "zmk,conditional-layers";

    /* Turn on Magic LED indicators for thumb layers */
    LAYER_CONDITION(editing_led, EDITING, EDITING_LED)
    LAYER_CONDITION(numbers_led, NUMBERS, NUMBERS_LED)
    LAYER_CONDITION(media_led, MEDIA, MEDIA_LED)
    LAYER_CONDITION(function_led, FUNCTION, FUNCTION_LED)

    /* Support for toggling Mac/PC mode */
    LAYER_CONDITION(sentence_case_pc, PC SENTENCE_CASE, SENTENCE_CASE_PC)
    LAYER_CONDITION(continue_selection_pc, PC CONT_SELECT, CONT_SELECT_PC)
    LAYER_CONDITION(editing_pc, PC EDITING, EDITING_PC)
    LAYER_CONDITION(numbers_pc, PC NUMBERS, NUMBERS_PC)
    LAYER_CONDITION(media_pc, PC MEDIA, MEDIA_PC)
    LAYER_CONDITION(function_pc, PC FUNCTION, FUNCTION_PC)

    /* Layer lock feature for Numbers layer */
    LAYER_CONDITION(numbers_mo, NUMBERS_MO, NUMBERS)
    LAYER_CONDITION(numbers_tog, NUMBERS_TOG, NUMBERS)

    /* Layer lock feature for Editing layer */
    LAYER_CONDITION(editing_mo, EDITING_MO, EDITING)
    LAYER_CONDITION(editing_tog, EDITING_TOG, EDITING)

    /* Restrict selection continuation to Editing layer */
    LAYER_CONDITION(continue_selection, EDITING CONT_SELECT_SL, CONT_SELECT)

    /* Hold Media and Function layers for System layer */
    LAYER_CONDITION(system_layer, MEDIA FUNCTION, SYSTEM)
};

/*****************************************************************************/
                        /* Basic Helper C Macros */
/*****************************************************************************/

/* Combo helper */
#define ZMK_COMBO(NAME, TIMEOUT_MS, KEY_POSITIONS, BINDINGS) \
    NAME { \
        timeout-ms = <TIMEOUT_MS>; \
        key-positions = <KEY_POSITIONS>; \
        bindings = <BINDINGS>; \
    };

/* Convert NAME parameters into a ZMK label string */
#define STRINGIFY(x) #x

/* Create a ZMK behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...) \
    behaviors { \
        NAME: NAME { \
            label = STRINGIFY(ZB_ ## NAME); \
            __VA_ARGS__ \
        }; \
    };

/* Hold-Tap helper */
#define HOLD_TAP(NAME, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-hold-tap"; \
        #binding-cells = <2>; \
        __VA_ARGS__ \
    )

/* Balanced Hold-Tap for home row mods and thumb layer keys */
#define BALANCED_HOLD_TAP(NAME, ...) \
    HOLD_TAP(NAME, \
        flavor = "balanced";  /* Fast hold behavior */ \
        __VA_ARGS__ \
    )

/* Mod-Morph helper */
#define MOD_MORPH(NAME, STANDARD, MORPHED, MODS) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <STANDARD>, <MORPHED>; \
        mods = <(MODS)>; \
    )

/* Mod-Morph that sends another key when Alt is held */
#define ALT_MORPH(NAME, PRIMARY, ALTERNATE) \
    MOD_MORPH(NAME, PRIMARY, ALTERNATE, MOD_LALT|MOD_RALT)

/* Mod-Morph that sends another key when Shift is held */
#define SHIFT_MORPH(NAME, LOWER, UPPER) \
    MOD_MORPH(NAME, LOWER, UPPER, MOD_LSFT|MOD_RSFT)

/* Mod-Morph that sends another key when Right Shift is held */
#define RIGHT_SHIFT_MORPH(NAME, LOWER, UPPER) \
    MOD_MORPH(NAME, LOWER, UPPER, MOD_RSFT)

/* Wrap ZMK_MACRO to avoid needing to specify Macro node */
#define ZMKMACRO(NAME, ...) \
    macros { \
        ZMK_MACRO(NAME, __VA_ARGS__) \
    };

/* Instant key press Macro helper */
#define FAST_MACRO(NAME, BINDINGS) \
    ZMKMACRO(NAME, \
        tap-ms = <0>; \
        wait-ms = <0>; \
        bindings = <BINDINGS>; \
    )

/*****************************************************************************/
                /* Sticky Layer State Machine Helper C Macros */
/*****************************************************************************/

/* Generic helper for Sticky Layer state machine actions and state
   transitions. Used to build more specific helpers for features that use this
   technique. SL_BEHAVIOR argument allows different features to use distinct
   Sticky Layer implementations. */
#define STATE_TRANSITION(NAME, ENTRY, EXIT, ACTION_BINDING, SL_BEHAVIOR, \
                         NEXT_STATE_LAYER) \
    FAST_MACRO(NAME, \
        ENTRY  /* Optional setup, pass &macro_tap &... */ \
        &macro_press ACTION_BINDING  /* Main action */ \
        &macro_press SL_BEHAVIOR NEXT_STATE_LAYER  /* Support rolling keys */ \
        &macro_pause_for_release  /* Hold for repeating key press */ \
        &macro_release ACTION_BINDING \
        EXIT  /* Optional teardown, pass &macro_tap &... */ \
        &macro_release SL_BEHAVIOR NEXT_STATE_LAYER  /* Move to next state */ \
    )

/* Quick release Sticky Layer that does not ignore modifiers */
#define STICKY_LAYER_NO_MODS(NAME, TIMEOUT_MS) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-sticky-key"; \
        #binding-cells = <1>; \
        release-after-ms = <TIMEOUT_MS>;  /* Release if no key is pressed */ \
        bindings = <&mo>; \
        quick-release;  /* Release as soon as another key is pressed */ \
        /delete-property/ ignore-modifiers;  /* Mods release Sticky Layer */ \
    )

/*****************************************************************************/
                            /* Behavior Changes */
/*****************************************************************************/

behaviors {

    /* Let Caps Word continue when typing Underscore */
    behavior_caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
    };

    /* Use defined timer for Sticky Keys */
    behavior_sticky_key {
        release-after-ms = <STICKY_KEY_RELEASE_AFTER_MS>;
        quick-release;
    };

    /* Use defined timer for Sticky Layers */
    behavior_sticky_layer {
        release-after-ms = <STICKY_KEY_RELEASE_AFTER_MS>;
    };
};

/*****************************************************************************/
                                /* Combos */
/*****************************************************************************/

/* Use defined timer for most Combos */
#define COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    ZMK_COMBO(NAME, COMBO_TIMEOUT_MS, KEY_POSITIONS, BINDINGS)

combos {
    compatible = "zmk,combos";

    /* Escape with left home thumb (Space) and left upper pinky (Q) */
    COMBO(combo_esc, 23 69, &kp ESC)

    /* Caps Word with left and right upper inner thumb keys (Shift) using
       defined timer */
    ZMK_COMBO(combo_caps_word, CAPS_WORD_COMBO_TIMEOUT_MS, 52 57, &caps_word)
};

/*****************************************************************************/
                            /* Home Row Mods */
/*****************************************************************************/

/* "Timerless" home row mod Hold-Tap using defined timers */
#define HOME_ROW_MOD(NAME, KEY_POSITIONS) \
    BALANCED_HOLD_TAP(NAME, \
        tapping-term-ms = <HOME_ROW_MODS_TAPPING_TERM_MS>;  /* Mouse usage */ \
        quick-tap-ms = <HOME_ROW_MODS_QUICK_TAP_MS>;  /* Typing cool down */ \
        global-quick-tap;  /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;  /* Use other hand */ \
        hold-trigger-on-release;  /* Enable chording mods */ \
        bindings = <&kp>, <&kp>; \
    )

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    /*    ┌────┬────┬────┬────┬────┐                                       */ \
             0    1    2    3    4                                            \
    /*    ├────┼────┼────┼────┼────┼────┐                                  */ \
            10   11   12   13   14   15                                       \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
            22   23   24   25   26   27                                       \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
            34   35   36   37   38   39                                       \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
            46   47   48   49   50   51                                       \
    /*    ├────┼────┼────┼────┼────┼────┘                                  */ \
            64   65   66   67   68
    /*    └────┴────┴────┴────┴────┘                                       */

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
    /*                                          ┌────┬────┬────┬────┬────┐ */ \
                                                   5    6    7    8    9      \
    /*                                     ┌────┼────┼────┼────┼────┼────┤ */ \
                                             16   17   18   19   20   21      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
                                             28   29   30   31   32   33      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
                                             40   41   42   43   44   45      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
                                             58   59   60   61   62   63      \
    /*                                     └────┼────┼────┼────┼────┼────┤ */ \
                                                  75   76   77   78   79
    /*                                          └────┴────┴────┴────┴────┘ */

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS \
    /*                 ┌────┬────┬────┐      ┌────┬────┬────┐              */ \
                         52   53   54          55   56   57                   \
    /*                 ├────┼────┼────┤      ├────┼────┼────┤              */ \
                         69   70   71          72   73   74
    /*                 └────┴────┴────┘      └────┴────┴────┘              */ 

HOME_ROW_MOD(lh_hr_mt, RIGHT_HAND_KEYS THUMB_KEYS)  /* Left hand */
HOME_ROW_MOD(rh_hr_mt, LEFT_HAND_KEYS THUMB_KEYS)  /* Right hand */

/*****************************************************************************/
                            /* Thumb Layer Keys */
/*****************************************************************************/

/* Home thumb layer tap without quick tap; faster layer switching */
#define HOME_THUMB_LAYER_TAP(NAME, TAP_BINDING) \
    BALANCED_HOLD_TAP(NAME, \
        tapping-term-ms = <THUMBS_TAPPING_TERM_MS>;  /* Rolls send tap key */ \
        bindings = <&mo>, <TAP_BINDING>; \
    )

/* Reaching thumb layer tap with double tap to repeat */
#define REACH_THUMB_LAYER_TAP(NAME, TAP_BINDING) \
    BALANCED_HOLD_TAP(NAME, \
        tapping-term-ms = <THUMBS_TAPPING_TERM_MS>;  /* Rolls send tap key */ \
        quick-tap-ms = <REACH_THUMBS_QUICK_TAP_MS>;  /* Double tap repeats */ \
        bindings = <&mo>, <TAP_BINDING>; \
    )

HOME_THUMB_LAYER_TAP(ht_lt, &kp)  /* Used for Editing and Numbers layers */
REACH_THUMB_LAYER_TAP(rt_lt, &kp)  /* Used for Media and Function layers */

/*****************************************************************************/
                        /* Triple Function Shift Keys */
/*****************************************************************************/

/* Instant Caps Lock on Mac OS */
ZMKMACRO(instant_caps_lock, \
    tap-ms = <200>;  /* Mac OS ignores short taps on Caps Lock */
    bindings = <&kp CAPS>;
)

/* Triple function left Shift */
MOD_MORPH(lshft_caps, &sk LSHFT, &instant_caps_lock, MOD_LSFT)

/* Triple function right Shift with Mac/PC support */
MOD_MORPH(rshft_bspcwd_mac, &sk RSHFT, &kp LA(BACKSPACE), MOD_RSFT)
MOD_MORPH(rshft_bspcwd_pc, &sk RSHFT, &kp LC(BACKSPACE), MOD_RSFT)

/*****************************************************************************/
                        /* Smart Sentence Case */
/*****************************************************************************/

/* Quick release Sticky Layer behavior that does not ignore modifiers using
   defined timer for the sentence case feature */
STICKY_LAYER_NO_MODS(sl_sentence_case, \
    END_SENTENCE_AND_SENTENCE_CASE_TIMEOUT_MS)

/* End sentence and sentence case Macro definition helper */
#define SENTENCE_HELPER(NAME, KEYCODE, LAYER) \
    STATE_TRANSITION(NAME, /* No ENTRY */, /* No EXIT */, &kp KEYCODE, \
        &sl_sentence_case, LAYER)

/* End sentence Macro helper */
#define END_SENTENCE_MACRO(NAME, KEYCODE) \
    SENTENCE_HELPER(NAME, KEYCODE, END_SENTENCE)

/* Sentence case Macro helper */
#define SENTENCE_CASE_MACRO(NAME, KEYCODE) \
    SENTENCE_HELPER(NAME, KEYCODE, SENTENCE_CASE)

/* End sentence Macros for . ? ! : */
END_SENTENCE_MACRO(dot_end_sentence, DOT)
END_SENTENCE_MACRO(question_end_sentence, QUESTION)
END_SENTENCE_MACRO(excl_end_sentence, EXCL)
END_SENTENCE_MACRO(colon_end_sentence, COLON)

/* Sentence case Macros for Space Tab Enter */
SENTENCE_CASE_MACRO(space_sentence_case, SPACE)
SENTENCE_CASE_MACRO(tab_sentence_case, TAB)
SENTENCE_CASE_MACRO(enter_sentence_case, ENTER)
 
/* Thumb layer taps for activating sentence case or thumb layers */
HOME_THUMB_LAYER_TAP(ht_lt_spc_sent_case, &space_sentence_case)
REACH_THUMB_LAYER_TAP(rt_lt_tab_sent_case, &tab_sentence_case)
REACH_THUMB_LAYER_TAP(rt_lt_ent_sent_case, &enter_sentence_case)

/*****************************************************************************/
                    /* Custom Base Layer Punctuation */
/*****************************************************************************/

/* Custom base layer punctuation with sentence case support */
SHIFT_MORPH(comma_semi, &kp COMMA, &kp SEMI)
SHIFT_MORPH(dot_colon, &kp DOT, &kp COLON)
SHIFT_MORPH(question_excl, &kp QUESTION, &kp EXCL)

/*****************************************************************************/
                    /* Numbers Layer Custom Shifted Pairs */
/*****************************************************************************/

/* Autoshift behavior using defined timer */
#define AUTOSHIFT(NAME, HOLD, TAP) \
    HOLD_TAP(NAME, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <AUTOSHIFT_TAPPING_TERM_MS>;  /* Hold for Shift */ \
        bindings = <HOLD>, <TAP>; \
    )

AUTOSHIFT(as, &kp, &kp)  /* Main Autoshift behavior */

/* Autoshifting Mod-Morph behavior that sends another key when Shift is held */
#define AUTOSHIFT_MORPH(NAME, LOWER, UPPER) \
    RIGHT_SHIFT_MORPH(NAME, &as UPPER LOWER, &kp UPPER)

/* Numbers layer custom number and symbol pairs with Autoshift */
AUTOSHIFT_MORPH(as_bslh_caret, BSLH, CARET)
AUTOSHIFT_MORPH(as_n7_lbkt, N7, LBKT)
AUTOSHIFT_MORPH(as_n8_rbkt, N8, RBKT)
AUTOSHIFT_MORPH(as_n9_star, N9, STAR)
AUTOSHIFT_MORPH(as_fslh_amps, FSLH, AMPS)
AUTOSHIFT_MORPH(as_colon_excl, COLON, EXCL)
AUTOSHIFT_MORPH(as_n4_lpar, N4, LPAR)
AUTOSHIFT_MORPH(as_n5_rpar, N5, RPAR)
AUTOSHIFT_MORPH(as_n6_equal, N6, EQUAL)
AUTOSHIFT_MORPH(as_hash_pipe, HASH, PIPE)
AUTOSHIFT_MORPH(as_at_prcnt, AT, PRCNT)
AUTOSHIFT_MORPH(as_n1_lbrc, N1, LBRC)
AUTOSHIFT_MORPH(as_n2_rbrc, N2, RBRC)
AUTOSHIFT_MORPH(as_n3_dllr, N3, DLLR)
AUTOSHIFT_MORPH(as_lt_gt, LT, GT)
AUTOSHIFT_MORPH(as_minus_plus, MINUS, PLUS)
AUTOSHIFT_MORPH(as_n0_under, N0, UNDER)
AUTOSHIFT_MORPH(as_grave_tilde, GRAVE, TILDE)

/*****************************************************************************/
                /* Editing Layer Alternative Shortcuts */
/*****************************************************************************/

/* Editing layer alternative shortcuts with Mac/PC support */
ALT_MORPH(cut_ins_mac, &kp LG(X), &kp INSERT)
ALT_MORPH(cut_ins_pc, &kp LC(X), &kp INSERT)
ALT_MORPH(copy_sel_all_mac, &kp LG(C), &kp LG(A))
ALT_MORPH(copy_sel_all_pc, &kp LC(C), &kp LC(A))
ALT_MORPH(paste_undo_mac, &kp LG(V), &kp LG(Z))
ALT_MORPH(paste_undo_pc, &kp LC(V), &kp LC(Z))

/*****************************************************************************/
                /* Editing Layer One-Handed Number Access */
/*****************************************************************************/

AUTOSHIFT(tog_sl, &tog, &sl)  /* Tap for a single number, hold to lock */

/*****************************************************************************/
                    /* Word and Line Selection Macros */
/*****************************************************************************/

/* Quick release Sticky Layer behavior that does not ignore modifiers using
   defined timer for continuing word and line selection Macros */
STICKY_LAYER_NO_MODS(sl_continue_selection, CONTINUE_SELECTION_TIMEOUT_MS)

/* Selection and selection continuation Macro definition helper */
#define SELECT_HELPER(NAME, SETUP, SELECTION_BINDING) \
    STATE_TRANSITION(NAME, SETUP, /* No EXIT */, SELECTION_BINDING, \
        &sl_continue_selection, CONT_SELECT_SL)

/* Selection Macro helper */
#define SELECT(NAME, SETUP_BINDINGS, SELECTION_BINDING) \
    SELECT_HELPER(NAME, &macro_tap SETUP_BINDINGS, SELECTION_BINDING)

/* Selection continuation Macro helper */
#define CONTINUE_SELECTION(NAME, SELECTION_BINDING) \
    SELECT_HELPER(NAME, /* No SETUP */, SELECTION_BINDING)

/* Word and line selection Macros for Mac */
SELECT(sel_wd_fwd_mac,  &kp LA(RIGHT) &kp LA(LEFT), &kp LS(LA(RIGHT)))
SELECT(sel_wd_bwd_mac, &kp LA(LEFT) &kp LA(RIGHT), &kp LS(LA(LEFT)))
SELECT(sel_ln_fwd_mac, &kp LG(LEFT) &kp LG(LEFT), &kp LS(DOWN))
SELECT(sel_ln_bwd_mac, &kp LG(LEFT) &kp LG(LEFT) &kp DOWN, &kp LS(UP))

/* Word and line selection Macros for PC */
SELECT(sel_wd_fwd_pc, &kp LC(RIGHT) &kp LC(LEFT), &kp LS(LC(RIGHT)))
SELECT(sel_wd_bwd_pc, &kp LC(LEFT) &kp LC(RIGHT), &kp LS(LC(LEFT)))
SELECT(sel_ln_fwd_pc, &kp HOME &kp HOME, &kp LS(DOWN))
SELECT(sel_ln_bwd_pc, &kp HOME &kp HOME &kp DOWN, &kp LS(UP))

/* Word selection continuation macros for Mac */
CONTINUE_SELECTION(cont_sel_wd_fwd_mac, &kp LS(LA(RIGHT)))
CONTINUE_SELECTION(cont_sel_wd_bwd_mac, &kp LS(LA(LEFT)))

/* Word selection continuation macros for PC */
CONTINUE_SELECTION(cont_sel_wd_fwd_pc, &kp LS(LC(RIGHT)))
CONTINUE_SELECTION(cont_sel_wd_bwd_pc, &kp LS(LC(LEFT)))

/* Line selection continuation macros */
CONTINUE_SELECTION(cont_sel_ln_fwd, &kp LS(DOWN))
CONTINUE_SELECTION(cont_sel_ln_bwd, &kp LS(UP))

/*****************************************************************************/
                    /* System Layer Confirmation Actions */
/*****************************************************************************/

/* Double tap to confirm dangerous actions using defined timer */
#define DOUBLE_TAP(NAME, BINDING) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-tap-dance"; \
        #binding-cells = <0>; \
        tapping-term-ms = <DOUBLE_TAP_TIMEOUT_MS>; \
        bindings = <&none>, <BINDING>;  /* Single tap does nothing */ \
    )

DOUBLE_TAP(confirm_bt_clr, &bt BT_CLR)  /* Clear current Bluetooth profile */
DOUBLE_TAP(confirm_pc, &tog PC)  /* Toggle Mac/PC mode */

/* The reset behaviors always reset the left half of the keyboard when nested
   in a Tap-Dance; reference ZMK issue #1494 */
// DOUBLE_TAP(confirm_reset, &sys_reset)  /* Soft reset */
// DOUBLE_TAP(confirm_bootloader, &bootloader)  /* Bootloader reset */
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
          &none              &none             &none             &none              &none                                                                                                                                                             &none             &none             &none  &kp LC(LS(LA(LG(F13))))  &kp LC(LS(LA(LG(F14))))
          &none              &none             &none             &none              &none   &none                                                                                                                                  &none              &none             &none             &none          &rgb_ug RGB_TOG            &kp LC(LG(Q))
          &none              &kp Q             &kp W             &kp F              &kp P   &kp B                                                                                                                                  &kp J              &kp L             &kp U             &kp Y           &question_excl                    &none
          &none  &lh_hr_mt LCTRL A  &lh_hr_mt LALT R  &lh_hr_mt LGUI S  &lh_hr_mt LSHFT T   &kp G                                                                                                                                  &kp M  &rh_hr_mt RSHFT N  &rh_hr_mt RGUI E  &rh_hr_mt RALT I        &rh_hr_mt RCTRL O                    &none
          &none              &kp Z             &kp X             &kp C              &kp D   &kp V                  &lshft_caps             &none        &none              &none                  &none        &rshft_bspcwd_mac   &kp K              &kp H       &comma_semi        &dot_colon                  &kp SQT                    &none
 &magic MAGIC 0              &none             &none             &none              &none          &ht_lt EDITING_MO BACKSPACE  &rt_lt MEDIA TAB  &lshft_caps  &rshft_bspcwd_mac  &rt_lt FUNCTION ENTER  &ht_lt NUMBERS_MO SPACE                      &none             &none             &none                    &none                    &none
            >;
        };

        layer_PC {
            bindings = <
 &trans            &trans  &trans             &trans  &trans                                                                            &trans             &trans  &trans             &none   &none
 &trans            &trans  &trans             &trans  &trans  &trans                                                            &trans  &trans             &trans  &trans            &trans   &none
 &trans            &trans  &trans             &trans  &trans  &trans                                                            &trans  &trans             &trans  &trans            &trans  &trans
 &trans  &lh_hr_mt LGUI A  &trans  &lh_hr_mt LCTRL S  &trans  &trans                                                            &trans  &trans  &rh_hr_mt RCTRL E  &trans  &rh_hr_mt RGUI O  &trans
 &trans            &trans  &trans             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rshft_bspcwd_pc  &trans  &trans             &trans  &trans            &trans  &trans
 &trans            &trans  &trans             &trans  &trans          &trans  &trans  &trans  &trans  &trans            &trans          &trans             &trans  &trans            &trans  &trans
            >;
        };

        layer_EditingLED {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_NumbersLED {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MediaLED {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_FunctionLED {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_SentenceCase {
            bindings = <
  &none                  &none                 &none                 &none                  &none                                                                                                                                                           &none                 &none                 &none                 &trans  &trans
  &none                  &none                 &none                 &none                  &none      &none                                                                                                                         &none                  &none                 &none                 &none                 &trans  &trans
  &none              &kp RS(Q)             &kp RS(W)             &kp RS(F)              &kp RS(P)  &kp RS(B)                                                                                                                     &kp LS(J)              &kp LS(L)             &kp LS(U)             &kp LS(Y)                 &trans   &none
  &none  &lh_hr_mt LCTRL RS(A)  &lh_hr_mt LALT RS(R)  &lh_hr_mt LGUI RS(S)  &lh_hr_mt LSHFT RS(T)  &kp RS(G)                                                                                                                     &kp LS(M)  &rh_hr_mt RSHFT LS(N)  &rh_hr_mt RGUI LS(E)  &rh_hr_mt RALT LS(I)  &rh_hr_mt RCTRL LS(O)   &none
  &none              &kp RS(Z)             &kp RS(X)             &kp RS(C)              &kp RS(D)  &kp RS(V)                      &trans                         &none   &none   &none                            &none  &trans  &kp LS(K)              &kp LS(H)                &trans                &trans                 &trans   &none
 &trans                  &none                 &none                 &none                  &none             &ht_lt EDITING_MO K_CANCEL  &rt_lt_tab_sent_case MEDIA 0   &none   &none  &rt_lt_ent_sent_case FUNCTION 0  &trans                             &none                 &none                 &none                  &none   &none
            >;
        };

        layer_SentenceCasePC {
            bindings = <
  &none                 &none   &none                  &none   &none                                                                   &none                  &none   &none                &trans  &trans
  &none                 &none   &none                  &none   &none   &none                                                   &none   &none                  &none   &none                &trans  &trans
  &none                &trans  &trans                 &trans  &trans  &trans                                                  &trans  &trans                 &trans  &trans                &trans   &none
  &none  &lh_hr_mt LGUI RS(A)  &trans  &lh_hr_mt LCTRL RS(S)  &trans  &trans                                                  &trans  &trans  &rh_hr_mt RCTRL LS(E)  &trans  &rh_hr_mt RGUI LS(O)   &none
  &none                &trans  &trans                 &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans  &trans  &trans                 &trans  &trans                &trans   &none
 &trans                 &none   &none                  &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none                  &none   &none                 &none   &none
            >;
        };

        layer_EndSentence {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                                                                                            &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                                                                                            &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                                                                                            &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                                                                                            &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                             &trans                        &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &ht_lt_spc_sent_case EDITING_MO 0  &rt_lt_tab_sent_case MEDIA 0  &trans  &trans  &rt_lt_ent_sent_case FUNCTION 0  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Editing {
            bindings = <
  &none      &none     &none     &none                           &none                                                                                                 &none            &none            &none            &none   &none
  &none      &none     &none     &none                           &none             &none                                                              &none            &none            &none            &none            &none   &none
  &none      &none     &none     &none            &sk LC(LS(LA(LGUI)))             &none                                                       &cut_ins_mac         &kp HOME        &kp PG_DN        &kp PG_UP          &kp END   &none
  &none  &sk LCTRL  &sk LALT  &sk LGUI                       &sk LSHFT  &tog EDITING_TOG                                                  &copy_sel_all_mac         &kp LEFT         &kp DOWN           &kp UP        &kp RIGHT   &none
  &none      &none     &none     &none  &tog_sl NUMBERS_TOG NUMBERS_MO             &none  &trans   &none   &none   &none   &none  &trans    &paste_undo_mac  &sel_wd_bwd_mac  &sel_ln_fwd_mac  &sel_ln_bwd_mac  &sel_wd_fwd_mac   &none
 &trans      &none     &none     &none                           &none                    &trans  &trans   &none   &none  &trans  &trans                               &none            &none            &none            &none   &none
            >;
        };

        layer_EditingPC {
            bindings = <
  &none     &none   &none      &none   &none                                                                                     &none           &none           &none           &none   &none
  &none     &none   &none      &none   &none   &none                                                             &none           &none           &none           &none           &none   &none
  &none     &none   &none      &none  &trans   &none                                                       &cut_ins_pc          &trans          &trans          &trans          &trans   &none
  &none  &sk LGUI  &trans  &sk LCTRL  &trans  &trans                                                  &copy_sel_all_pc          &trans          &trans          &trans          &trans   &none
  &none     &none   &none      &none  &trans   &none  &trans   &none   &none   &none   &none  &trans    &paste_undo_pc  &sel_wd_bwd_pc  &sel_ln_fwd_pc  &sel_ln_bwd_pc  &sel_wd_fwd_pc   &none
 &trans     &none   &none      &none   &none          &trans  &trans   &none   &none  &trans  &trans                             &none           &none           &none           &none   &none
            >;
        };

        layer_ContSelect {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                                &trans            &trans            &trans                &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans                &trans            &trans            &trans                &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans                &trans            &trans            &trans                &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans                &trans            &trans            &trans                &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &cont_sel_wd_bwd_mac  &cont_sel_ln_fwd  &cont_sel_ln_bwd  &cont_sel_wd_fwd_mac  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                        &trans            &trans            &trans                &trans  &trans
            >;
        };

        layer_ContSelectPC {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                               &trans  &trans  &trans               &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans               &trans  &trans  &trans               &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans               &trans  &trans  &trans               &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans               &trans  &trans  &trans               &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &cont_sel_wd_bwd_pc  &trans  &trans  &cont_sel_wd_fwd_pc  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans               &trans  &trans
            >;
        };

        layer_Numbers {
            bindings = <
  &none           &none        &none        &none         &none                                                                                                                   &none     &none     &none      &none   &none
  &none           &none        &none        &none         &none          &none                                                                              &none                 &none     &none     &none      &none   &none
  &none  &as_bslh_caret  &as_n7_lbkt  &as_n8_rbkt   &as_n9_star  &as_fslh_amps                                                                              &none  &sk RC(RS(RA(RGUI)))     &none     &none      &none   &none
  &none  &as_colon_excl  &as_n4_lpar  &as_n5_rpar  &as_n6_equal  &as_hash_pipe                                                                   &tog NUMBERS_TOG             &sk RSHFT  &sk RGUI  &sk RALT  &sk RCTRL   &none
  &none    &as_at_prcnt  &as_n1_lbrc  &as_n2_rbrc   &as_n3_dllr      &as_lt_gt  &as_minus_plus            &none   &none   &none   &none  &trans             &none             &sk LSHFT     &none     &none      &none   &none
 &trans           &none        &none        &none         &none                   &as_n0_under  &as_grave_tilde   &none   &none  &trans  &trans                                   &none     &none     &none      &none   &none
            >;
        };

        layer_NumbersPC {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none      &none   &none     &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none      &none   &none     &none   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                   &none  &trans      &none   &none     &none   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &sk RCTRL  &trans  &sk RGUI   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans   &none  &trans      &none   &none     &none   &none
 &trans   &none   &none   &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none      &none   &none     &none   &none
            >;
        };

        layer_Media {
            bindings = <
  &none      &none     &none     &none                 &none                                                                                         &none         &none         &none   &none   &none
  &none      &none     &none     &none                 &none   &none                                                                     &none       &none         &none         &none   &none   &none
  &none      &none     &none     &none  &sk LC(LS(LA(LGUI)))   &none                                                                     &none  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none   &none
  &none  &sk LCTRL  &sk LALT  &sk LGUI             &sk LSHFT   &none                                                                     &none    &kp C_PP    &kp C_PREV    &kp C_NEXT   &none   &none
  &none      &none     &none     &none                 &none   &none  &trans   &none   &none   &none                   &none    &trans   &none   &kp C_PWR  &kp C_BRI_DN  &kp C_BRI_UP   &none   &none
 &trans      &none     &none     &none                 &none          &trans  &trans   &none   &none  &rt_lt FUNCTION DELETE  &kp BSPC               &none         &none         &none   &none   &none
            >;
        };

        layer_MediaPC {
            bindings = <
  &none     &none   &none      &none   &none                                                                   &none   &none   &none   &none   &none
  &none     &none   &none      &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none     &none   &none      &none  &trans   &none                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none  &sk LGUI  &trans  &sk LCTRL  &trans   &none                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none     &none   &none      &none   &none   &none  &trans   &none   &none   &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none
 &trans     &none   &none      &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none   &none   &none   &none   &none
            >;
        };

        layer_Function {
            bindings = <
  &none    &none   &none   &none   &none                                                                                                       &none     &none     &none      &none   &none
  &none    &none   &none   &none   &none            &none                                                                &none                 &none     &none     &none      &none   &none
  &none  &kp F12  &kp F7  &kp F8  &kp F9        &kp PSCRN                                                                &none  &sk RC(RS(RA(RGUI)))     &none     &none      &none   &none
  &none  &kp F11  &kp F4  &kp F5  &kp F6         &kp SLCK                                                                &none             &sk RSHFT  &sk RGUI  &sk RALT  &sk RCTRL   &none
  &none  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK     &trans             &none   &none   &none   &none  &trans   &none                 &none     &none     &none      &none   &none
 &trans    &none   &none   &none   &none                   &kp SPACE  &rt_lt MEDIA ESC   &none   &none  &trans  &trans                         &none     &none     &none      &none   &none
            >;
        };

        layer_FunctionPC {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none      &none   &none     &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none      &none   &none     &none   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                   &none  &trans      &none   &none     &none   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                   &none  &trans  &sk RCTRL  &trans  &sk RGUI   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans   &none   &none      &none   &none     &none   &none
 &trans   &none   &none   &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none      &none   &none     &none   &none
            >;
        };

        layer_System {
            bindings = <
  &none            &none            &none            &none            &none                                                                                           &none   &none       &none        &none   &none
  &none            &none            &none            &none            &none            &none                                                         &none            &none   &none       &none        &none   &none
  &none      &bootloader       &sys_reset            &none            &none      &confirm_pc                                                   &confirm_pc            &none   &none  &sys_reset  &bootloader   &none
  &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                  &out OUT_USB            &bt_3   &bt_2       &bt_1        &bt_0   &none
  &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF  &trans   &none   &none   &none   &none  &trans         &none  &confirm_bt_clr   &none       &none        &none   &none
 &trans            &none            &none            &none            &none                   &trans  &trans   &none   &none  &trans  &trans                          &none   &none       &none        &none   &none
            >;
        };

        layer_EditingMo {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_EditingTog {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                         &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans   &none  &trans     &trans   &trans  &trans  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &kp SPACE  &kp TAB  &trans  &trans  &kp RET  &kp BSPC          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_NumbersMo {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_NumbersTog {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                     &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &kp RET  &kp BSPC          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_ContSelectSL {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none         &tog PC
            >;
        };

    };
};
